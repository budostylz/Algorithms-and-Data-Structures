*** Don't know how to determine efficiency for main level of program ***

Task0.py
getListData(texts, calls)
9072 = texts.length 
5213 = calls.length 
n = 14285 = (9072 + 5213)
7 = 7 lines for output string
1 = 1 line not included in output string
O(n)
O(n + 7)
14285 + 7
14292
O(n) = 14292


-------------------------------------------------------------------------------

Task1.py

def mergeTextsAndCalls(texts, calls) 
9072 = texts.length 
5213 = calls.length 
n = 14285 = (9072 + 5213)
2 = 2 lines for output string
4 = 4 lines not included in output string
O(n)
O(4n + 2)
4(14285)+2
57140+2
57142
O(n) = 57142

def countList(callTextList) 
9072 = texts.length 
5213 = calls.length 
n = 14285 = (9072 + 5213)
5 = 5 lines for output string
9 = 9 lines not included in output string( only 1 line will run in True if condition)
O(n)
O(9n + 5)
9(14285) + 5
128565 + 5
128570
O(n) = 128570

def getNumberType(number)
n = 1 number string
1 = 1 output string
3 = 3 lines not included in output string
O(n)
O(3n + 1)
3(1) + 1
4 + 1
O(n) = 5

---------------------------------------------------------------------
Task2.py

def getSeptemberDates(calls)
n = 5213 = calls.length 
2 = 2 lines for output string
5 = 5 lines not included in output string
O(n)
O(5n + 2)
5(5213) + 2
26065 + 2
O(n) = 26067

testSeptDate(dateStr)
n = 1 date string
2 = 2 output strings
7 = 7 lines not included in output string (only 1 line will run in True if condition)
O(n)
O(7n + 2)
7(1) + 2
O(n) = 9

def getHighTime(sortedSeptemberList)
n = 5213 = calls.length(Worst Case)
3 = 3 output strings
1 = 1 line not included in output string 
O(n)
O(n + 3)
1 + 3
O(n) = 4

def sort_a_little_bit(items, begin_index, end_index)
def sort_all(items, begin_index, end_index)
def quicksort(items)
O(n log(n) ) *** NEED HELP CALCULATING THIS WHEN VIEWING THE CODE ***
n = 5213 = calls.length(Worst Case)
5213 * log(5213) 
5213 * 3.71708
O(n log(n) ) = 19377.1
---------------------------------------------------------------------------------
Task3.py

def checkBangaloreAreaCodes(calls)
n = 5213 = calls.length
4 = 4 output strings
9 = 9 lines not included in output string
O(n)
O(9n + 4)
9(5213) + 4
46917 + 4
O(n) = 46921

def setBangaloreAreaCodeList(incomingNumber, bangaloreList)
5213 = bangaloreList.length(Worst Case)
n = 5214 = 1 number string + 5213
1 = 1 output string
O(n)
O(n + 1)
5214 + 1
O(n) = 5215

bangaloreSort(bangaloreList)
5213 = bangaloreList.length(Worst Case)
n = 5213
1 = 1 output string
8 = 8 lines not included in output string
O(n^2) 
O(8(n^2) + 1)
8(5213^2) + 1
8(27175369) + 1
217402952 + 1
217402953
O(n) = 217402953

def outputA(sortedCodes)
5213 = sortedCodes.length(Worst Case)
n = 5213
0 = 0 output string
3 = 3 lines not included in output string
O(n)
O(3n + 0)
3(5213) + 0
O(n) = 15639

def outputB(part, whole)
2 = 1 part + 1 whole
0 = 0 output string
7 = 7 lines not included in output string
O(n)
O(7n + 0)
7(2)
O(n) = 14
--------------------------------------------------------------------------------
Task4.py

def checkTelemarketNumbers(calls)
n = 5213 = calls.length
2 = 2 output string
3 = 3 lines not included in output string
O(n)
O(3n + 2)
3(5213) + 2
15639 + 2
O(n) = 15641

def checkRepeats(incomingNumber, telemarketList)
1 = incomingNumber string
5213 = telemarketList.length
n = 5214 = 1 + 5213
1 = 1 output string
6 = 6 lines not included in output string
O(n)
O(6n + 1)
6(5214) + 1
31284 + 2
O(n) = 31284

def teleSort(sortedScamerNumbers)
5213 = sortedScamerNumbers.length(Worst Case)
n = 5213
1 = 1 output string
8 = 8 lines not included in output string
O(n^2) 
O(8(n^2) + 1)
8(5213^2) + 1
8(27175369) + 1
217402952 + 1
217402953
O(n) = 217402953














